// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Weather.Data;

#nullable disable

namespace Weather.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20250929101152_ChangeSensorSettingIdToInt")]
    partial class ChangeSensorSettingIdToInt
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Weather.Models.Alarm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("AlarmEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AlarmMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AlarmName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AlarmStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AlarmType")
                        .HasColumnType("int");

                    b.Property<long>("StationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StationId");

                    b.ToTable("Alarm");
                });

            modelBuilder.Entity("Weather.Models.AlarmLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("AlarmDateTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("AlarmId")
                        .HasColumnType("bigint");

                    b.Property<string>("AlarmMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AlarmId");

                    b.ToTable("AlarmLog");
                });

            modelBuilder.Entity("Weather.Models.AlarmTell", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AlarmId")
                        .HasColumnType("bigint");

                    b.Property<long>("StationTelId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AlarmId");

                    b.HasIndex("StationTelId");

                    b.ToTable("AlarmTell");
                });

            modelBuilder.Entity("Weather.Models.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StateId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Weather.Models.Correspondence", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("MessageAnswerId")
                        .HasColumnType("bigint");

                    b.Property<string>("MessageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserSenderId")
                        .HasColumnType("bigint");

                    b.Property<bool>("ViewState")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("UserSenderId");

                    b.ToTable("Correspondence");
                });

            modelBuilder.Entity("Weather.Models.DataLogger", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DataLogger");
                });

            modelBuilder.Entity("Weather.Models.Files", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Desctription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("File")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Weather.Models.ForecastsAlarmDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AlarmId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForecastsAlarmParameterId")
                        .HasColumnType("bigint");

                    b.Property<bool>("MinOrMax")
                        .HasColumnType("bit");

                    b.Property<double?>("MinOrMaxvalue")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AlarmId");

                    b.HasIndex("ForecastsAlarmParameterId");

                    b.ToTable("ForecastsAlarmDetail");
                });

            modelBuilder.Entity("Weather.Models.ForecastsAlarmParameter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ForecastsAlarmParameter");
                });

            modelBuilder.Entity("Weather.Models.ForecastsLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AlarmId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForecastsAlarmDetailId")
                        .HasColumnType("bigint");

                    b.Property<double>("ForecastsMinOrMax")
                        .HasColumnType("float");

                    b.Property<string>("ForecastsText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ForecastsAlarmDetailId");

                    b.ToTable("ForecastsLog");
                });

            modelBuilder.Entity("Weather.Models.ManagerTel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("AcceptEditInsert")
                        .HasColumnType("bit");

                    b.Property<bool>("Accepted")
                        .HasColumnType("bit");

                    b.Property<bool>("End")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NotAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("Start")
                        .HasColumnType("bit");

                    b.Property<bool>("Sum")
                        .HasColumnType("bit");

                    b.Property<bool>("Sum12")
                        .HasColumnType("bit");

                    b.Property<bool>("Sum24")
                        .HasColumnType("bit");

                    b.Property<bool>("SumOprator")
                        .HasColumnType("bit");

                    b.Property<string>("Tel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Warning")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ManagerTel");
                });

            modelBuilder.Entity("Weather.Models.ModemType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ModemType");
                });

            modelBuilder.Entity("Weather.Models.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserGetId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserInsertedId")
                        .HasColumnType("bigint");

                    b.Property<bool>("ViewState")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("UserGetId");

                    b.HasIndex("UserInsertedId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Weather.Models.PestAlarmDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AlarmId")
                        .HasColumnType("bigint");

                    b.Property<int?>("CountLevel")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateLevel2")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateLevel3")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateLevel4")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateLevel5")
                        .HasColumnType("datetime2");

                    b.Property<string>("LevelName1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LevelName2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LevelName3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LevelName4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LevelName5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LevelNow")
                        .HasColumnType("int");

                    b.Property<double?>("PDDDate2")
                        .HasColumnType("float");

                    b.Property<double?>("PDDDate3")
                        .HasColumnType("float");

                    b.Property<double?>("PDDDate4")
                        .HasColumnType("float");

                    b.Property<double?>("PDDDate5")
                        .HasColumnType("float");

                    b.Property<double?>("PDDLevel2")
                        .HasColumnType("float");

                    b.Property<double?>("PDDLevel3")
                        .HasColumnType("float");

                    b.Property<double?>("PDDLevel4")
                        .HasColumnType("float");

                    b.Property<double?>("PDDLevel5")
                        .HasColumnType("float");

                    b.Property<double?>("TempBase")
                        .HasColumnType("float");

                    b.Property<double?>("TempMax")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AlarmId")
                        .IsUnique();

                    b.ToTable("PestAlarmDetails");
                });

            modelBuilder.Entity("Weather.Models.ProcessedData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<double?>("DataValue")
                        .HasColumnType("float");

                    b.Property<long?>("LastProcessedId")
                        .HasColumnType("bigint");

                    b.Property<int>("SensorSettingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SensorSettingId")
                        .IsUnique();

                    b.ToTable("ProcessedDatas");
                });

            modelBuilder.Entity("Weather.Models.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Detail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SmsCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("Weather.Models.RainfallEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("FirstIdWithRain")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsEndSMSSent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRaining")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStartSMSSent")
                        .HasColumnType("bit");

                    b.Property<long?>("LastIdWithRain")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RainEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RainStart")
                        .HasColumnType("datetime2");

                    b.Property<double>("RainfallVolume")
                        .HasColumnType("float");

                    b.Property<int>("SensorSettingId")
                        .HasColumnType("int");

                    b.Property<long?>("StationId")
                        .HasColumnType("bigint");

                    b.Property<int?>("StationType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SensorSettingId");

                    b.HasIndex("StationId");

                    b.ToTable("RainfallEvents");
                });

            modelBuilder.Entity("Weather.Models.ReceivedSMS", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Accepted")
                        .HasColumnType("bit");

                    b.Property<string>("DatePrs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EndDatePrs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("From")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Process")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReceivedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StartDatePrs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("StationId")
                        .HasColumnType("bigint");

                    b.Property<string>("StationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("ReceivedSMS");
                });

            modelBuilder.Entity("Weather.Models.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Weather.Models.SendSMS", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("DatePrs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SendTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("To")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SendSMS");
                });

            modelBuilder.Entity("Weather.Models.SensorAlarmDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AlarmId")
                        .HasColumnType("bigint");

                    b.Property<double>("MinMaxValue")
                        .HasColumnType("float");

                    b.Property<bool>("MinimumOrMaximum")
                        .HasColumnType("bit");

                    b.Property<bool>("OnlineOrTimeDuration")
                        .HasColumnType("bit");

                    b.Property<long>("SensorTypeId")
                        .HasColumnType("bigint");

                    b.Property<double?>("Threshold")
                        .HasColumnType("float");

                    b.Property<int?>("TimeDuration")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlarmId");

                    b.HasIndex("SensorTypeId");

                    b.ToTable("SensorAlarmDetail");
                });

            modelBuilder.Entity("Weather.Models.SensorDateTime", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("Data")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("SensorSettingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DateTime");

                    b.HasIndex("SensorSettingId");

                    b.ToTable("SensorDateTime");
                });

            modelBuilder.Entity("Weather.Models.SensorSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("SensorCompany")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SensorDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SensorDigit")
                        .HasColumnType("int");

                    b.Property<bool>("SensorEnable")
                        .HasColumnType("bit");

                    b.Property<double?>("SensorMax")
                        .HasColumnType("float");

                    b.Property<double?>("SensorMin")
                        .HasColumnType("float");

                    b.Property<string>("SensorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SensorRow")
                        .HasColumnType("int");

                    b.Property<string>("SensorSerial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SensorTecnicalType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SensorType")
                        .HasColumnType("int");

                    b.Property<long?>("SensorTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("StationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UnitId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SensorTypeId");

                    b.HasIndex("StationId");

                    b.HasIndex("UnitId");

                    b.ToTable("SensorSetting");
                });

            modelBuilder.Entity("Weather.Models.SensorType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("AVG")
                        .HasColumnType("bit");

                    b.Property<bool>("AvgVect")
                        .HasColumnType("bit");

                    b.Property<bool>("DegreeDay")
                        .HasColumnType("bit");

                    b.Property<string>("EnName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Max")
                        .HasColumnType("bit");

                    b.Property<bool>("Min")
                        .HasColumnType("bit");

                    b.Property<int>("SensorDigit")
                        .HasColumnType("int");

                    b.Property<double>("SensorMax")
                        .HasColumnType("float");

                    b.Property<double>("SensorMin")
                        .HasColumnType("float");

                    b.Property<int>("SensorType_State")
                        .HasColumnType("int");

                    b.Property<bool>("Sum")
                        .HasColumnType("bit");

                    b.Property<long>("UnitId")
                        .HasColumnType("bigint");

                    b.Property<bool>("WindDirect")
                        .HasColumnType("bit");

                    b.Property<bool>("WindSpeed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.ToTable("SensorType");
                });

            modelBuilder.Entity("Weather.Models.SmsCharge", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("SmsCharge");
                });

            modelBuilder.Entity("Weather.Models.SmsSend", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AlarmId")
                        .HasColumnType("bigint");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AlarmId");

                    b.HasIndex("UserId");

                    b.ToTable("SmsSend");
                });

            modelBuilder.Entity("Weather.Models.State", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("State");
                });

            modelBuilder.Entity("Weather.Models.Station", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AboveSeaLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ChargeSms")
                        .HasColumnType("datetime2");

                    b.Property<long>("DataLoggerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationKeyOne")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationKeyTwo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ModemTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperatorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperatorPhonNO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SmsCount")
                        .HasColumnType("int");

                    b.Property<string>("StationCardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StationTypeId")
                        .HasColumnType("bigint");

                    b.Property<double?>("Tisen")
                        .HasColumnType("float");

                    b.Property<bool>("UpdateSetting")
                        .HasColumnType("bit");

                    b.Property<bool>("UpdateTime")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DataLoggerId");

                    b.HasIndex("ModemTypeId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StationTypeId");

                    b.ToTable("Station");
                });

            modelBuilder.Entity("Weather.Models.StationFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StationId");

                    b.ToTable("StationFile");
                });

            modelBuilder.Entity("Weather.Models.StationTel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Post")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Tel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StationId");

                    b.ToTable("StationTel");
                });

            modelBuilder.Entity("Weather.Models.StationType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfflineIcon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OnlineIcon")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StationType");
                });

            modelBuilder.Entity("Weather.Models.Unit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("EnName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Unit");
                });

            modelBuilder.Entity("Weather.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<long?>("CityId")
                        .HasColumnType("bigint");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RegisterCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Registered")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int?>("UserInsertedId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Weather.Models.UserAction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("ActionType")
                        .HasColumnType("int");

                    b.Property<string>("EntityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserAction");
                });

            modelBuilder.Entity("Weather.Models.UserLoginHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserLoginHistory");
                });

            modelBuilder.Entity("Weather.Models.UserStation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("StationId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserStation");
                });

            modelBuilder.Entity("Weather.Models.VersionHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VersionHistories");
                });

            modelBuilder.Entity("Weather.Models.VirtualSensorBase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ParameterName1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParameterName2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParameterName3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParameterName4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParameterName5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParameterType1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParameterType2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParameterType3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParameterType4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParameterType5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParameterValue1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParameterValue2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParameterValue3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParameterValue4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParameterValue5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SensorTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SensorTypeId")
                        .IsUnique();

                    b.ToTable("VirtualSensorBase");
                });

            modelBuilder.Entity("Weather.Models.VirtualSensorDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ParameterName1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParameterName2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParameterName3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParameterName4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParameterName5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParameterType1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParameterType2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParameterType3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParameterType4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParameterType5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParameterValue1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParameterValue2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParameterValue3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParameterValue4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParameterValue5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StationId");

                    b.ToTable("VirtualSensorDetail");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("Weather.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("Weather.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("Weather.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("Weather.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Weather.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("Weather.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Weather.Models.Alarm", b =>
                {
                    b.HasOne("Weather.Models.Station", "Station")
                        .WithMany()
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Station");
                });

            modelBuilder.Entity("Weather.Models.AlarmLog", b =>
                {
                    b.HasOne("Weather.Models.Alarm", "Alarm")
                        .WithMany("AlarmLogs")
                        .HasForeignKey("AlarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alarm");
                });

            modelBuilder.Entity("Weather.Models.AlarmTell", b =>
                {
                    b.HasOne("Weather.Models.Alarm", "Alarm")
                        .WithMany("AlarmTells")
                        .HasForeignKey("AlarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Weather.Models.StationTel", "StationTel")
                        .WithMany()
                        .HasForeignKey("StationTelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alarm");

                    b.Navigation("StationTel");
                });

            modelBuilder.Entity("Weather.Models.City", b =>
                {
                    b.HasOne("Weather.Models.State", "State")
                        .WithMany("City")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("Weather.Models.Correspondence", b =>
                {
                    b.HasOne("Weather.Models.User", "User")
                        .WithMany("Correspondences")
                        .HasForeignKey("UserSenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Weather.Models.ForecastsAlarmDetail", b =>
                {
                    b.HasOne("Weather.Models.Alarm", "Alarm")
                        .WithMany("ForecastsAlarmDetails")
                        .HasForeignKey("AlarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Weather.Models.ForecastsAlarmParameter", "ForecastsAlarmParameter")
                        .WithMany()
                        .HasForeignKey("ForecastsAlarmParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alarm");

                    b.Navigation("ForecastsAlarmParameter");
                });

            modelBuilder.Entity("Weather.Models.ForecastsLog", b =>
                {
                    b.HasOne("Weather.Models.ForecastsAlarmDetail", "ForecastsAlarmDetail")
                        .WithMany("ForecastsLogs")
                        .HasForeignKey("ForecastsAlarmDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ForecastsAlarmDetail");
                });

            modelBuilder.Entity("Weather.Models.Notification", b =>
                {
                    b.HasOne("Weather.Models.User", "UserRecive")
                        .WithMany("NotificationsRecive")
                        .HasForeignKey("UserGetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Weather.Models.User", "UserSend")
                        .WithMany("NotificationsSend")
                        .HasForeignKey("UserInsertedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRecive");

                    b.Navigation("UserSend");
                });

            modelBuilder.Entity("Weather.Models.PestAlarmDetail", b =>
                {
                    b.HasOne("Weather.Models.Alarm", "Alarm")
                        .WithOne("PestAlarmDetail")
                        .HasForeignKey("Weather.Models.PestAlarmDetail", "AlarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alarm");
                });

            modelBuilder.Entity("Weather.Models.ProcessedData", b =>
                {
                    b.HasOne("Weather.Models.SensorSetting", "SensorSetting")
                        .WithOne("ProcessedData")
                        .HasForeignKey("Weather.Models.ProcessedData", "SensorSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SensorSetting");
                });

            modelBuilder.Entity("Weather.Models.RainfallEvent", b =>
                {
                    b.HasOne("Weather.Models.SensorSetting", null)
                        .WithMany("RainfallEvents")
                        .HasForeignKey("SensorSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Weather.Models.Station", "Station")
                        .WithMany("RainfallEvents")
                        .HasForeignKey("StationId");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("Weather.Models.SensorAlarmDetail", b =>
                {
                    b.HasOne("Weather.Models.Alarm", "Alarm")
                        .WithMany("SensorAlarmDetails")
                        .HasForeignKey("AlarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Weather.Models.SensorType", "SensorType")
                        .WithMany("SensorAlarmDetails")
                        .HasForeignKey("SensorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alarm");

                    b.Navigation("SensorType");
                });

            modelBuilder.Entity("Weather.Models.SensorDateTime", b =>
                {
                    b.HasOne("Weather.Models.SensorSetting", "SensorSetting")
                        .WithMany("SensorDateTimes")
                        .HasForeignKey("SensorSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SensorSetting");
                });

            modelBuilder.Entity("Weather.Models.SensorSetting", b =>
                {
                    b.HasOne("Weather.Models.SensorType", "SensorTypes")
                        .WithMany("SensorSettings")
                        .HasForeignKey("SensorTypeId");

                    b.HasOne("Weather.Models.Station", "Station")
                        .WithMany("SensorSettings")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Weather.Models.Unit", "Unit")
                        .WithMany("SensorSettings")
                        .HasForeignKey("UnitId");

                    b.Navigation("SensorTypes");

                    b.Navigation("Station");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Weather.Models.SensorType", b =>
                {
                    b.HasOne("Weather.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Weather.Models.SmsCharge", b =>
                {
                    b.HasOne("Weather.Models.Project", "Project")
                        .WithMany("SmsCharges")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Weather.Models.SmsSend", b =>
                {
                    b.HasOne("Weather.Models.Alarm", "Alarm")
                        .WithMany("SmsSends")
                        .HasForeignKey("AlarmId");

                    b.HasOne("Weather.Models.User", "User")
                        .WithMany("SmsSends")
                        .HasForeignKey("UserId");

                    b.Navigation("Alarm");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Weather.Models.Station", b =>
                {
                    b.HasOne("Weather.Models.DataLogger", "DataLogger")
                        .WithMany("Stations")
                        .HasForeignKey("DataLoggerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Weather.Models.ModemType", "ModemType")
                        .WithMany("Stations")
                        .HasForeignKey("ModemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Weather.Models.Project", "Project")
                        .WithMany("Stations")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Weather.Models.StationType", "StationType")
                        .WithMany("Stations")
                        .HasForeignKey("StationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataLogger");

                    b.Navigation("ModemType");

                    b.Navigation("Project");

                    b.Navigation("StationType");
                });

            modelBuilder.Entity("Weather.Models.StationFile", b =>
                {
                    b.HasOne("Weather.Models.Station", "Station")
                        .WithMany("StationFiles")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Station");
                });

            modelBuilder.Entity("Weather.Models.StationTel", b =>
                {
                    b.HasOne("Weather.Models.Station", "Station")
                        .WithMany("StationTels")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Station");
                });

            modelBuilder.Entity("Weather.Models.User", b =>
                {
                    b.HasOne("Weather.Models.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId");

                    b.Navigation("City");
                });

            modelBuilder.Entity("Weather.Models.UserAction", b =>
                {
                    b.HasOne("Weather.Models.User", "User")
                        .WithMany("UserActions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Weather.Models.UserLoginHistory", b =>
                {
                    b.HasOne("Weather.Models.User", "User")
                        .WithMany("UserLoginHistorys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Weather.Models.UserStation", b =>
                {
                    b.HasOne("Weather.Models.User", "User")
                        .WithMany("UserStations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Weather.Models.VirtualSensorBase", b =>
                {
                    b.HasOne("Weather.Models.SensorType", "SensorType")
                        .WithOne("VirtualSensorBase")
                        .HasForeignKey("Weather.Models.VirtualSensorBase", "SensorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SensorType");
                });

            modelBuilder.Entity("Weather.Models.VirtualSensorDetail", b =>
                {
                    b.HasOne("Weather.Models.Station", "Station")
                        .WithMany("VirtualSensorDetails")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Station");
                });

            modelBuilder.Entity("Weather.Models.Alarm", b =>
                {
                    b.Navigation("AlarmLogs");

                    b.Navigation("AlarmTells");

                    b.Navigation("ForecastsAlarmDetails");

                    b.Navigation("PestAlarmDetail");

                    b.Navigation("SensorAlarmDetails");

                    b.Navigation("SmsSends");
                });

            modelBuilder.Entity("Weather.Models.City", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Weather.Models.DataLogger", b =>
                {
                    b.Navigation("Stations");
                });

            modelBuilder.Entity("Weather.Models.ForecastsAlarmDetail", b =>
                {
                    b.Navigation("ForecastsLogs");
                });

            modelBuilder.Entity("Weather.Models.ModemType", b =>
                {
                    b.Navigation("Stations");
                });

            modelBuilder.Entity("Weather.Models.Project", b =>
                {
                    b.Navigation("SmsCharges");

                    b.Navigation("Stations");
                });

            modelBuilder.Entity("Weather.Models.SensorSetting", b =>
                {
                    b.Navigation("ProcessedData");

                    b.Navigation("RainfallEvents");

                    b.Navigation("SensorDateTimes");
                });

            modelBuilder.Entity("Weather.Models.SensorType", b =>
                {
                    b.Navigation("SensorAlarmDetails");

                    b.Navigation("SensorSettings");

                    b.Navigation("VirtualSensorBase");
                });

            modelBuilder.Entity("Weather.Models.State", b =>
                {
                    b.Navigation("City");
                });

            modelBuilder.Entity("Weather.Models.Station", b =>
                {
                    b.Navigation("RainfallEvents");

                    b.Navigation("SensorSettings");

                    b.Navigation("StationFiles");

                    b.Navigation("StationTels");

                    b.Navigation("VirtualSensorDetails");
                });

            modelBuilder.Entity("Weather.Models.StationType", b =>
                {
                    b.Navigation("Stations");
                });

            modelBuilder.Entity("Weather.Models.Unit", b =>
                {
                    b.Navigation("SensorSettings");
                });

            modelBuilder.Entity("Weather.Models.User", b =>
                {
                    b.Navigation("Correspondences");

                    b.Navigation("NotificationsRecive");

                    b.Navigation("NotificationsSend");

                    b.Navigation("SmsSends");

                    b.Navigation("UserActions");

                    b.Navigation("UserLoginHistorys");

                    b.Navigation("UserStations");
                });
#pragma warning restore 612, 618
        }
    }
}
