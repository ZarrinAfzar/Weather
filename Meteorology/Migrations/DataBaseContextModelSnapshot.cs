// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Weather.Data;

namespace Weather.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    partial class DataBaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<long>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<long>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<long>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Weather.Models.Alarm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AlarmEndDate");

                    b.Property<string>("AlarmMessage");

                    b.Property<string>("AlarmName");

                    b.Property<DateTime>("AlarmStartDate");

                    b.Property<int>("AlarmType");

                    b.Property<long>("StationId");

                    b.HasKey("Id");

                    b.HasIndex("StationId");

                    b.ToTable("Alarm");
                });

            modelBuilder.Entity("Weather.Models.AlarmLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AlarmDateTime");

                    b.Property<long>("AlarmId");

                    b.Property<string>("AlarmMessage");

                    b.Property<DateTime>("InsertDateTime");

                    b.HasKey("Id");

                    b.HasIndex("AlarmId");

                    b.ToTable("AlarmLog");
                });

            modelBuilder.Entity("Weather.Models.AlarmTell", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AlarmId");

                    b.Property<long>("StationTelId");

                    b.HasKey("Id");

                    b.HasIndex("AlarmId");

                    b.HasIndex("StationTelId");

                    b.ToTable("AlarmTell");
                });

            modelBuilder.Entity("Weather.Models.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<long>("StateId");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Weather.Models.Correspondence", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("InsertDate");

                    b.Property<long?>("MessageAnswerId");

                    b.Property<string>("MessageText");

                    b.Property<long>("UserSenderId");

                    b.Property<bool>("ViewState");

                    b.HasKey("Id");

                    b.HasIndex("UserSenderId");

                    b.ToTable("Correspondence");
                });

            modelBuilder.Entity("Weather.Models.DataLogger", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("DataLogger");
                });

            modelBuilder.Entity("Weather.Models.Files", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Desctription");

                    b.Property<string>("File");

                    b.Property<DateTime>("InsertDate");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Weather.Models.ForecastsAlarmDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AlarmId");

                    b.Property<long>("ForecastsAlarmParameterId");

                    b.Property<bool>("MinOrMax");

                    b.Property<double?>("MinOrMaxvalue");

                    b.HasKey("Id");

                    b.HasIndex("AlarmId");

                    b.HasIndex("ForecastsAlarmParameterId");

                    b.ToTable("ForecastsAlarmDetail");
                });

            modelBuilder.Entity("Weather.Models.ForecastsAlarmParameter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Icon");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("ForecastsAlarmParameter");
                });

            modelBuilder.Entity("Weather.Models.ForecastsLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AlarmId");

                    b.Property<long>("ForecastsAlarmDetailId");

                    b.Property<double>("ForecastsMinOrMax");

                    b.Property<string>("ForecastsText");

                    b.HasKey("Id");

                    b.HasIndex("ForecastsAlarmDetailId");

                    b.ToTable("ForecastsLog");
                });

            modelBuilder.Entity("Weather.Models.ManagerTel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AcceptEditInsert");

                    b.Property<bool>("Accepted");

                    b.Property<bool>("End");

                    b.Property<string>("LastName");

                    b.Property<string>("Name");

                    b.Property<bool>("NotAccepted");

                    b.Property<bool>("Start");

                    b.Property<bool>("Sum");

                    b.Property<bool>("Sum12");

                    b.Property<bool>("Sum24");

                    b.Property<bool>("SumOprator");

                    b.Property<string>("Tel");

                    b.Property<bool>("Warning");

                    b.HasKey("Id");

                    b.ToTable("ManagerTel");
                });

            modelBuilder.Entity("Weather.Models.ModemType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ModemType");
                });

            modelBuilder.Entity("Weather.Models.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("InsertDate");

                    b.Property<string>("Message");

                    b.Property<long>("UserGetId");

                    b.Property<long>("UserInsertedId");

                    b.Property<bool>("ViewState");

                    b.HasKey("Id");

                    b.HasIndex("UserGetId");

                    b.HasIndex("UserInsertedId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Weather.Models.PestAlarmDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AlarmId");

                    b.Property<int?>("CountLevel");

                    b.Property<DateTime?>("DateLevel2");

                    b.Property<DateTime?>("DateLevel3");

                    b.Property<DateTime?>("DateLevel4");

                    b.Property<DateTime?>("DateLevel5");

                    b.Property<string>("LevelName1");

                    b.Property<string>("LevelName2");

                    b.Property<string>("LevelName3");

                    b.Property<string>("LevelName4");

                    b.Property<string>("LevelName5");

                    b.Property<int>("LevelNow");

                    b.Property<double?>("PDDDate2");

                    b.Property<double?>("PDDDate3");

                    b.Property<double?>("PDDDate4");

                    b.Property<double?>("PDDDate5");

                    b.Property<double?>("PDDLevel2");

                    b.Property<double?>("PDDLevel3");

                    b.Property<double?>("PDDLevel4");

                    b.Property<double?>("PDDLevel5");

                    b.Property<double?>("TempBase");

                    b.Property<double?>("TempMax");

                    b.HasKey("Id");

                    b.HasIndex("AlarmId")
                        .IsUnique();

                    b.ToTable("PestAlarmDetails");
                });

            modelBuilder.Entity("Weather.Models.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Detail");

                    b.Property<DateTime>("InsertDate");

                    b.Property<string>("Name");

                    b.Property<int>("SmsCount");

                    b.HasKey("Id");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("Weather.Models.ReceivedSMS", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Accepted");

                    b.Property<string>("DatePrs");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EndDate");

                    b.Property<string>("EndDatePrs");

                    b.Property<string>("From");

                    b.Property<string>("Message");

                    b.Property<int?>("Process");

                    b.Property<DateTime?>("ReceivedTime");

                    b.Property<DateTime?>("StartDate");

                    b.Property<string>("StartDatePrs");

                    b.Property<long?>("StationId");

                    b.Property<string>("StationName");

                    b.Property<string>("Type");

                    b.Property<double?>("Value");

                    b.HasKey("Id");

                    b.ToTable("ReceivedSMS");
                });

            modelBuilder.Entity("Weather.Models.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Weather.Models.SendSMS", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DatePrs");

                    b.Property<string>("Message");

                    b.Property<string>("Name");

                    b.Property<DateTime>("SendTime");

                    b.Property<string>("Status");

                    b.Property<string>("To");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("SendSMS");
                });

            modelBuilder.Entity("Weather.Models.SensorAlarmDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AlarmId");

                    b.Property<double>("MinMaxValue");

                    b.Property<bool>("MinimumOrMaximum");

                    b.Property<bool>("OnlineOrTimeDuration");

                    b.Property<long>("SensorTypeId");

                    b.Property<double?>("Threshold");

                    b.Property<int?>("TimeDuration");

                    b.HasKey("Id");

                    b.HasIndex("AlarmId");

                    b.HasIndex("SensorTypeId");

                    b.ToTable("SensorAlarmDetail");
                });

            modelBuilder.Entity("Weather.Models.SensorDateTime", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Data");

                    b.Property<DateTime>("DateTime");

                    b.Property<long>("SensorSettingId");

                    b.HasKey("Id");

                    b.HasIndex("DateTime");

                    b.HasIndex("SensorSettingId");

                    b.ToTable("SensorDateTime");
                });

            modelBuilder.Entity("Weather.Models.SensorSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SensorCompany");

                    b.Property<DateTime>("SensorDateTime");

                    b.Property<int?>("SensorDigit");

                    b.Property<bool>("SensorEnable");

                    b.Property<double?>("SensorMax");

                    b.Property<double?>("SensorMin");

                    b.Property<string>("SensorName");

                    b.Property<int>("SensorRow");

                    b.Property<string>("SensorSerial");

                    b.Property<string>("SensorTecnicalType");

                    b.Property<int>("SensorType");

                    b.Property<long?>("SensorTypeId");

                    b.Property<long>("StationId");

                    b.Property<long?>("UnitId");

                    b.HasKey("Id");

                    b.HasIndex("SensorTypeId");

                    b.HasIndex("StationId");

                    b.HasIndex("UnitId");

                    b.ToTable("SensorSetting");
                });

            modelBuilder.Entity("Weather.Models.SensorType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AVG");

                    b.Property<bool>("AvgVect");

                    b.Property<bool>("DegreeDay");

                    b.Property<string>("EnName");

                    b.Property<string>("FaName");

                    b.Property<bool>("Max");

                    b.Property<bool>("Min");

                    b.Property<int>("SensorDigit");

                    b.Property<double>("SensorMax");

                    b.Property<double>("SensorMin");

                    b.Property<int>("SensorType_State");

                    b.Property<bool>("Sum");

                    b.Property<long>("UnitId");

                    b.Property<bool>("WindDirect");

                    b.Property<bool>("WindSpeed");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.ToTable("SensorType");
                });

            modelBuilder.Entity("Weather.Models.SmsCharge", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("InsertDate");

                    b.Property<long>("ProjectId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("SmsCharge");
                });

            modelBuilder.Entity("Weather.Models.SmsSend", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AlarmId");

                    b.Property<string>("PhoneNumber");

                    b.Property<DateTime>("SendDate");

                    b.Property<string>("Status");

                    b.Property<string>("Text");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AlarmId");

                    b.HasIndex("UserId");

                    b.ToTable("SmsSend");
                });

            modelBuilder.Entity("Weather.Models.State", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("State");
                });

            modelBuilder.Entity("Weather.Models.Station", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AboveSeaLevel");

                    b.Property<DateTime?>("ChargeSms");

                    b.Property<long>("DataLoggerId");

                    b.Property<string>("Image");

                    b.Property<string>("Latitude");

                    b.Property<string>("LocationKeyOne");

                    b.Property<string>("LocationKeyTwo");

                    b.Property<string>("Longitude");

                    b.Property<long>("ModemTypeId");

                    b.Property<string>("Name");

                    b.Property<string>("OperatorName");

                    b.Property<string>("OperatorPhonNO");

                    b.Property<long>("ProjectId");

                    b.Property<string>("SerialNumber");

                    b.Property<int?>("SmsCount");

                    b.Property<string>("StationCardNumber");

                    b.Property<string>("StationCode");

                    b.Property<long>("StationTypeId");

                    b.Property<double?>("Tisen");

                    b.Property<bool>("UpdateSetting");

                    b.Property<bool>("UpdateTime");

                    b.HasKey("Id");

                    b.HasIndex("DataLoggerId");

                    b.HasIndex("ModemTypeId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StationTypeId");

                    b.ToTable("Station");
                });

            modelBuilder.Entity("Weather.Models.StationFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("FileAddress");

                    b.Property<long>("StationId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("StationId");

                    b.ToTable("StationFile");
                });

            modelBuilder.Entity("Weather.Models.StationTel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LastName");

                    b.Property<string>("Name");

                    b.Property<string>("Post");

                    b.Property<long>("StationId");

                    b.Property<string>("Tel");

                    b.HasKey("Id");

                    b.HasIndex("StationId");

                    b.ToTable("StationTel");
                });

            modelBuilder.Entity("Weather.Models.StationType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("OfflineIcon");

                    b.Property<string>("OnlineIcon");

                    b.HasKey("Id");

                    b.ToTable("StationType");
                });

            modelBuilder.Entity("Weather.Models.Unit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EnName");

                    b.Property<string>("FaName");

                    b.HasKey("Id");

                    b.ToTable("Unit");
                });

            modelBuilder.Entity("Weather.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<long?>("CityId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("Image");

                    b.Property<DateTime>("InsertDate");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("RegisterCode");

                    b.Property<bool>("Registered");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<int?>("UserInsertedId");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Weather.Models.UserAction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionType");

                    b.Property<string>("EntityName");

                    b.Property<DateTime>("InsertDate");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserAction");
                });

            modelBuilder.Entity("Weather.Models.UserLoginHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("InsertDate");

                    b.Property<int>("Type");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserLoginHistory");
                });

            modelBuilder.Entity("Weather.Models.UserStation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ProjectId");

                    b.Property<long>("StationId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserStation");
                });

            modelBuilder.Entity("Weather.Models.VirtualSensorBase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ParameterName1");

                    b.Property<string>("ParameterName2");

                    b.Property<string>("ParameterName3");

                    b.Property<string>("ParameterName4");

                    b.Property<string>("ParameterName5");

                    b.Property<string>("ParameterType1");

                    b.Property<string>("ParameterType2");

                    b.Property<string>("ParameterType3");

                    b.Property<string>("ParameterType4");

                    b.Property<string>("ParameterType5");

                    b.Property<string>("ParameterValue1");

                    b.Property<string>("ParameterValue2");

                    b.Property<string>("ParameterValue3");

                    b.Property<string>("ParameterValue4");

                    b.Property<string>("ParameterValue5");

                    b.Property<long>("SensorTypeId");

                    b.HasKey("Id");

                    b.HasIndex("SensorTypeId")
                        .IsUnique();

                    b.ToTable("VirtualSensorBase");
                });

            modelBuilder.Entity("Weather.Models.VirtualSensorDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ParameterName1");

                    b.Property<string>("ParameterName2");

                    b.Property<string>("ParameterName3");

                    b.Property<string>("ParameterName4");

                    b.Property<string>("ParameterName5");

                    b.Property<string>("ParameterType1");

                    b.Property<string>("ParameterType2");

                    b.Property<string>("ParameterType3");

                    b.Property<string>("ParameterType4");

                    b.Property<string>("ParameterType5");

                    b.Property<string>("ParameterValue1");

                    b.Property<string>("ParameterValue2");

                    b.Property<string>("ParameterValue3");

                    b.Property<string>("ParameterValue4");

                    b.Property<string>("ParameterValue5");

                    b.Property<long>("StationId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("StationId");

                    b.ToTable("VirtualSensorDetail");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("Weather.Models.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("Weather.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("Weather.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("Weather.Models.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Weather.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("Weather.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Weather.Models.Alarm", b =>
                {
                    b.HasOne("Weather.Models.Station", "Station")
                        .WithMany()
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Weather.Models.AlarmLog", b =>
                {
                    b.HasOne("Weather.Models.Alarm", "Alarm")
                        .WithMany("AlarmLogs")
                        .HasForeignKey("AlarmId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Weather.Models.AlarmTell", b =>
                {
                    b.HasOne("Weather.Models.Alarm", "Alarm")
                        .WithMany("AlarmTells")
                        .HasForeignKey("AlarmId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Weather.Models.StationTel", "StationTel")
                        .WithMany()
                        .HasForeignKey("StationTelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Weather.Models.City", b =>
                {
                    b.HasOne("Weather.Models.State", "State")
                        .WithMany("City")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Weather.Models.Correspondence", b =>
                {
                    b.HasOne("Weather.Models.User", "User")
                        .WithMany("Correspondences")
                        .HasForeignKey("UserSenderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Weather.Models.ForecastsAlarmDetail", b =>
                {
                    b.HasOne("Weather.Models.Alarm", "Alarm")
                        .WithMany("ForecastsAlarmDetails")
                        .HasForeignKey("AlarmId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Weather.Models.ForecastsAlarmParameter", "ForecastsAlarmParameter")
                        .WithMany()
                        .HasForeignKey("ForecastsAlarmParameterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Weather.Models.ForecastsLog", b =>
                {
                    b.HasOne("Weather.Models.ForecastsAlarmDetail", "ForecastsAlarmDetail")
                        .WithMany("ForecastsLogs")
                        .HasForeignKey("ForecastsAlarmDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Weather.Models.Notification", b =>
                {
                    b.HasOne("Weather.Models.User", "UserRecive")
                        .WithMany("NotificationsRecive")
                        .HasForeignKey("UserGetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Weather.Models.User", "UserSend")
                        .WithMany("NotificationsSend")
                        .HasForeignKey("UserInsertedId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Weather.Models.PestAlarmDetail", b =>
                {
                    b.HasOne("Weather.Models.Alarm", "Alarm")
                        .WithOne("PestAlarmDetail")
                        .HasForeignKey("Weather.Models.PestAlarmDetail", "AlarmId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Weather.Models.SensorAlarmDetail", b =>
                {
                    b.HasOne("Weather.Models.Alarm", "Alarm")
                        .WithMany("SensorAlarmDetails")
                        .HasForeignKey("AlarmId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Weather.Models.SensorType", "SensorType")
                        .WithMany("SensorAlarmDetails")
                        .HasForeignKey("SensorTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Weather.Models.SensorDateTime", b =>
                {
                    b.HasOne("Weather.Models.SensorSetting", "SensorSetting")
                        .WithMany("SensorDateTimes")
                        .HasForeignKey("SensorSettingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Weather.Models.SensorSetting", b =>
                {
                    b.HasOne("Weather.Models.SensorType", "SensorTypes")
                        .WithMany("SensorSettings")
                        .HasForeignKey("SensorTypeId");

                    b.HasOne("Weather.Models.Station", "Station")
                        .WithMany("SensorSettings")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Weather.Models.Unit", "Unit")
                        .WithMany("SensorSettings")
                        .HasForeignKey("UnitId");
                });

            modelBuilder.Entity("Weather.Models.SensorType", b =>
                {
                    b.HasOne("Weather.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Weather.Models.SmsCharge", b =>
                {
                    b.HasOne("Weather.Models.Project", "Project")
                        .WithMany("SmsCharges")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Weather.Models.SmsSend", b =>
                {
                    b.HasOne("Weather.Models.Alarm", "Alarm")
                        .WithMany("SmsSends")
                        .HasForeignKey("AlarmId");

                    b.HasOne("Weather.Models.User", "User")
                        .WithMany("SmsSends")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Weather.Models.Station", b =>
                {
                    b.HasOne("Weather.Models.DataLogger", "DataLogger")
                        .WithMany("Stations")
                        .HasForeignKey("DataLoggerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Weather.Models.ModemType", "ModemType")
                        .WithMany("Stations")
                        .HasForeignKey("ModemTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Weather.Models.Project", "Project")
                        .WithMany("Stations")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Weather.Models.StationType", "StationType")
                        .WithMany("Stations")
                        .HasForeignKey("StationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Weather.Models.StationFile", b =>
                {
                    b.HasOne("Weather.Models.Station", "Station")
                        .WithMany("StationFiles")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Weather.Models.StationTel", b =>
                {
                    b.HasOne("Weather.Models.Station", "Station")
                        .WithMany("StationTels")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Weather.Models.User", b =>
                {
                    b.HasOne("Weather.Models.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId");
                });

            modelBuilder.Entity("Weather.Models.UserAction", b =>
                {
                    b.HasOne("Weather.Models.User", "User")
                        .WithMany("UserActions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Weather.Models.UserLoginHistory", b =>
                {
                    b.HasOne("Weather.Models.User", "User")
                        .WithMany("UserLoginHistorys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Weather.Models.UserStation", b =>
                {
                    b.HasOne("Weather.Models.User", "User")
                        .WithMany("UserStations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Weather.Models.VirtualSensorBase", b =>
                {
                    b.HasOne("Weather.Models.SensorType", "SensorType")
                        .WithOne("VirtualSensorBase")
                        .HasForeignKey("Weather.Models.VirtualSensorBase", "SensorTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Weather.Models.VirtualSensorDetail", b =>
                {
                    b.HasOne("Weather.Models.Station", "Station")
                        .WithMany("VirtualSensorDetails")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
